<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>machine burning</title><link href="http://hitnail.net/" rel="alternate"></link><link href="http://hitnail.net/feeds/all.atom.xml" rel="self"></link><id>http://hitnail.net/</id><updated>2016-11-09T00:00:00+01:00</updated><entry><title>In 2016 we might have learned a thing or two about contemporary democracies</title><link href="http://hitnail.net/in-2016-we-might-have-learned-a-thing-or-two-about-contemporary-democracies.html" rel="alternate"></link><updated>2016-11-09T00:00:00+01:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2016-11-09:in-2016-we-might-have-learned-a-thing-or-two-about-contemporary-democracies.html</id><summary type="html">&lt;p&gt;It keeps popping up these day, from &lt;a href="https://www.youtube.com/watch?v=KwUh-yVBV_Q"&gt;Hypernormalisation&lt;/a&gt; to &lt;a href="https://vimeo.com/190154199"&gt;The price of certainty&lt;/a&gt;, passing by &lt;a href="https://www.youtube.com/watch?v=CoQC58pUp3g"&gt;Black Mirror&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=ULwUzF1q5w4"&gt;House of Cards&lt;/a&gt;: we live in a post-factual world. 
The speed and volume of information in the current distorts our mental model of the world. We realize more than never that our society seems to exist on top of a narrative that doesn't need substance or truth to exist. We have more data and less knowledge. &lt;a href="http://www.markborkowski.co.uk/hypernormal-pr-in-a-post-truth-world/"&gt;Everything is PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://androidsdreaminpixels.tumblr.com/image/152952935152"&gt;&lt;img src="http://66.media.tumblr.com/35de4d3d22f3a3b1b52ae35ca57cf997/tumblr_ogdt7cEdJz1ugrpdno1_1280.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This disconnection between what we experience and what we are fed through mass media make our contemporary democracies act in barely surrreal ways. 
I compiled with the help with some friends in social media a small list of learnings from our very own 2016, the year of the monkey:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A democratically elected president can be taken down by a dubious conspiracy made by it's own (and very shady) political allies without proper trial, with the support of a big part of the population in name of some moral crusade against corruption.&lt;/li&gt;
&lt;li&gt;A country can decide to ditch a deal that puts it on a very privileged position in the world, with the support of the part of the population that benefits the most from this same deal.&lt;/li&gt;
&lt;li&gt;A 4 year peace negotiation to solve an ongoing 60 year civil war can be thrown in the dumpster, with the support of the population most affected by the conflict.&lt;/li&gt;
&lt;li&gt;A presidential candidate riding piggyback on the political establishment, leading on most polls and considered the &lt;em&gt;sound&lt;/em&gt; option can lose the elections to a inexperienced, incoherent and borderline perverse candidate, with the support of a silent majority that would be the most punished by the measures proposed by this winning candidate.&lt;/li&gt;
&lt;li&gt;A supposedly democratically elected present can be just a façade for a semi-mystical secret society led by the president's counsellor, who has been its mentor since childhood.&lt;/li&gt;
&lt;li&gt;A president with vast popular support staged a fake coup to dismantle the opposition and reinforce grip in the country's institutions. All the while being backed by the western powers, which see this country as a strategic partner in a key and largely destabilized region.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="politics"></category><category term="democracy"></category></entry><entry><title>Building OCaml and C++ mixed projects with OCaml-Makefile</title><link href="http://hitnail.net/building-ocaml-and-c-mixed-projects-with-ocaml-makefile.html" rel="alternate"></link><updated>2016-10-20T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2016-10-20:building-ocaml-and-c-mixed-projects-with-ocaml-makefile.html</id><summary type="html">&lt;p&gt;One difficulty I faced in my recent adventures with OCaml was figuring out how to organize and build my tiny toy projects, which have some custom C++ code in the mix. 
There's a &lt;a href="https://github.com/ocaml/ocamlbuild/blob/master/manual/manual.adoc#pros-cons-and-alternatives"&gt;lot of fragmentation&lt;/a&gt;
in the OCaml ecosystem for build systems, and while &lt;a href="https://github.com/ocaml/ocamlbuild"&gt;ocamlbuild&lt;/a&gt; seems to be the most widely used tool,
there's no consensus on the community of an &lt;em&gt;official&lt;/em&gt; solution. In the midst of all that mess, my only
goal was to find something that required the minimum amount of configuration for me to get something running
and still keep a mildly organized codebase. 
The piece of software that met my requirements was &lt;a href="https://github.com/mmottl/ocaml-makefile"&gt;OCaml-Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's very simple to use it: copy that OCaml-Makefile into the root of your project and create your Makefile containing
&lt;code&gt;-include OCamlMakefile&lt;/code&gt; as the last line, and specify some variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SOURCES&lt;/code&gt;: the OCaml and C source files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RESULT&lt;/code&gt;: the name of the resuting product.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PACKS&lt;/code&gt;: &lt;a href="https://github.com/ocaml/opam/"&gt;opam&lt;/a&gt; packages that should be linked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That done, building binaries and libraries in native or bytecode, with debugging or profiling directives enabled if necessary, 
is as easy as invoking a make target. The README of the OCamlMakefile goes through most of the use cases of the tool,
but I still faced some minor trouble when trying to compile a piece of software that contained some C++ source files and was
linked with C libraries -- and that's why I'm writing this post.&lt;/p&gt;
&lt;p&gt;It turns out that there are two more important variables to take care of when compiling and linking C++ libs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CXXFLAGS&lt;/code&gt;: the include path of headers used in your C++ code. The output of &lt;code&gt;pkg-config --cflags&lt;/code&gt;. Not adding the correct &lt;code&gt;-I&lt;/code&gt; flags here will result in a compile time error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLIBS&lt;/code&gt;: the libraries used while linking your executable, without the &lt;code&gt;-l&lt;/code&gt; part. As you're using C++ code remember to add &lt;code&gt;c++&lt;/code&gt; (from &lt;code&gt;-lc++&lt;/code&gt;) here. Missing libs here will result in a &lt;code&gt;Undefined symbols for architecture x86_64:&lt;/code&gt; kind of error &lt;em&gt;at runtime&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I uploaded &lt;a href="https://github.com/brunoro/webcaml"&gt;webcaml&lt;/a&gt; as an example project with this setup that uses the &lt;a href="http://opencv.org/"&gt;OpenCV C++&lt;/a&gt; interface through ctypes and &lt;a href="https://libsdl.org/"&gt;SDL2&lt;/a&gt; through &lt;a href="http://erratique.ch/software/tsdl"&gt;tsdl&lt;/a&gt; to show a webcam feed (a herculean task by itself without the help of some established codebase). The approach used to interface with C++ using is the one described in &lt;a href="https://github.com/ocamllabs/ocaml-ctypes/issues/187"&gt;this github issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/elbeise/status/786926310929076224"&gt;&lt;img src="https://pbs.twimg.com/tweet_video_thumb/Cuu5OEKWYAAthVT.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="ocaml"></category><category term="opencv"></category></entry><entry><title>Serbilian: writing Brazilian Portuguese in Serbian Cyrilic</title><link href="http://hitnail.net/serbilian-writing-brazilian-portuguese-in-serbian-cyrilic.html" rel="alternate"></link><updated>2016-09-15T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2016-09-15:serbilian-writing-brazilian-portuguese-in-serbian-cyrilic.html</id><summary type="html">&lt;p&gt;EDIT (2016-09-16): as of a great suggestion from &lt;a href="http://hisham.hm/"&gt;hisham&lt;/a&gt;, I reused some symbols from Russian Cyrilic (Э э for /ɛ/, X x for /x/) instead of using Latin alphabet or IPA replacements. I still kept S s for /z/ with readability in mind, as З з looks &lt;em&gt;very&lt;/em&gt; similar to Э э to non-seasoned cyrilic readers like me.&lt;/p&gt;
&lt;p&gt;I recently attented &lt;a href="https://2k16.balccon.org/index.php?title=Main_Page"&gt;BalCCon2k16&lt;/a&gt; in Novi Sad, Serbia with 
my good friend &lt;a href="https://twitter.com/daltojr"&gt;@daltojr&lt;/a&gt; and, apart from the amazing people and delicious food, 
something that we both enjoyed was reading &lt;a href="https://en.wikipedia.org/wiki/Serbian_Cyrillic_alphabet"&gt;Serbian Cyrilic&lt;/a&gt;.
The fact that every sound was represented directly by one letter made it very easy for us to (badly) read with the Serbian
language very quickly. Due to the similarities of the sounds between Serbian and Portuguese, we quickly started joking
around writing portuguese words in that script. After hearing from one of the cool staff members on the hostel we were staying
that Brazilians and Serbs were very much alike -- the so called Serbilians -- I decided to roll up my sleeves and write
some software to translate pt-BR into cyrilic.&lt;/p&gt;
&lt;h2&gt;Сербилeрu&lt;/h2&gt;
&lt;p&gt;Before writing any line of code, I had to define how each sound in Brazilian Portuguese would be written.
I was sure that some of the sounds would have a corresponding cyrilic letter, so that also meant creating a new script: the
&lt;em&gt;Serbilian&lt;/em&gt; (Alfabeto Serbileiro/Auфабεтu Сербилeрu). 
My process was simple: I started off with the &lt;a href="https://en.wikipedia.org/wiki/Help:IPA_for_Portuguese"&gt;Portuguese phonemes in IPA&lt;/a&gt;, then matched those to the Serbian Cyrilic characters and finally added the missing symbols. 
At that point, I followed some guidelines to fill the gaps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;reuse symbols from sounds similar sounds in Serbian not present in pt-BR: /v/ is written as "В" or "в", which originally represent /ʋ/.&lt;/li&gt;
&lt;li&gt;group sounds with negligible pronounciation differences: /r/ and /ɾ/ are both written as "Р" or "р".&lt;/li&gt;
&lt;li&gt;use latin letters not used in the Serbian Cyrilic script: /w/, /ʊ/ and /ʊ̃/ are represented as "U" or "u".&lt;/li&gt;
&lt;li&gt;grab Russian alphabet letters that represent sounds that are not present in Serbian: /ɛ/ becomes "Э" or "э".&lt;/li&gt;
&lt;li&gt;use the IPA symbol rather than adding an accent over a letter: /ɐ/ is written as "∀" or "ɐ", rather than "â".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One downside of the result is that the stress mark, normally written with acute accents in pt-BR, is totally lost.
This could be easily solved by adding stress marks like a dot under the letter (I didn't implement this in my code).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IPA&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Serbilian&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/a/ /æ/&lt;/td&gt;
&lt;td&gt;d&lt;strong&gt;á&lt;/strong&gt;, J&lt;strong&gt;a&lt;/strong&gt;ime&lt;/td&gt;
&lt;td&gt;А а&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ã/ /ɐ/ /ɐ̃/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;a&lt;/strong&gt;ndaime, itapu&lt;strong&gt;ã&lt;/strong&gt;, p&lt;strong&gt;ã&lt;/strong&gt;o&lt;/td&gt;
&lt;td&gt;∀ ɐ (not in Serbian)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/b/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;b&lt;/strong&gt;eiço, ca&lt;strong&gt;b&lt;/strong&gt;eça&lt;/td&gt;
&lt;td&gt;Б б&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/k/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;c&lt;/strong&gt;or, &lt;strong&gt;qu&lt;/strong&gt;ente, &lt;strong&gt;k&lt;/strong&gt;iwi&lt;/td&gt;
&lt;td&gt;К к&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/d/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;d&lt;/strong&gt;edo, i&lt;strong&gt;d&lt;/strong&gt;ade&lt;/td&gt;
&lt;td&gt;Д д&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/dʒ/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;d&lt;/strong&gt;igo, ida&lt;strong&gt;d&lt;/strong&gt;e&lt;/td&gt;
&lt;td&gt;Џ џ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/e/&lt;/td&gt;
&lt;td&gt;pr&lt;strong&gt;ê&lt;/strong&gt;mio, m&lt;strong&gt;e&lt;/strong&gt;do&lt;/td&gt;
&lt;td&gt;Е е&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ɛ/&lt;/td&gt;
&lt;td&gt;m&lt;strong&gt;e&lt;/strong&gt;ta, s&lt;strong&gt;é&lt;/strong&gt;, &lt;strong&gt;É&lt;/strong&gt;merson, caf&lt;strong&gt;e&lt;/strong&gt;zinho&lt;/td&gt;
&lt;td&gt;Э э (not in Serbian)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/f/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;f&lt;/strong&gt;ado, ca&lt;strong&gt;f&lt;/strong&gt;é&lt;/td&gt;
&lt;td&gt;Ф ф&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ɡ/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;g&lt;/strong&gt;ato, &lt;strong&gt;gu&lt;/strong&gt;erra&lt;/td&gt;
&lt;td&gt;Г г&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/j/ /ɪ/&lt;/td&gt;
&lt;td&gt;sa&lt;strong&gt;i&lt;/strong&gt;a, pa&lt;strong&gt;i&lt;/strong&gt;s,&lt;/td&gt;
&lt;td&gt;Ј ј&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/i/ /y/&lt;/td&gt;
&lt;td&gt;d&lt;strong&gt;i&lt;/strong&gt;a, ra&lt;strong&gt;i&lt;/strong&gt;nha, pa&lt;strong&gt;i&lt;/strong&gt;s&lt;/td&gt;
&lt;td&gt;И и&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/l/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;l&lt;/strong&gt;ua, a&lt;strong&gt;l&lt;/strong&gt;ô&lt;/td&gt;
&lt;td&gt;Л л&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ʒ/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;j&lt;/strong&gt;á, &lt;strong&gt;g&lt;/strong&gt;ente&lt;/td&gt;
&lt;td&gt;Ж ж&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ʎ/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;lh&lt;/strong&gt;e, ve&lt;strong&gt;lh&lt;/strong&gt;o&lt;/td&gt;
&lt;td&gt;Љ љ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/w/ /ʊ/ /ʊ̃/ /y/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;o&lt;/strong&gt;, ma&lt;strong&gt;l&lt;/strong&gt;, ma&lt;strong&gt;u&lt;/strong&gt;, freq&lt;strong&gt;u&lt;/strong&gt;ente, q&lt;strong&gt;u&lt;/strong&gt;ã&lt;strong&gt;o&lt;/strong&gt;, Ca&lt;strong&gt;u&lt;/strong&gt;ã, veja&lt;strong&gt;m&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;У y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/m/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;m&lt;/strong&gt;ês, so&lt;strong&gt;m&lt;/strong&gt;o&lt;/td&gt;
&lt;td&gt;М м&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/n/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;n&lt;/strong&gt;ão, so&lt;strong&gt;n&lt;/strong&gt;o&lt;/td&gt;
&lt;td&gt;Н н&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ɲ/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;nh&lt;/strong&gt;oque, so&lt;strong&gt;nh&lt;/strong&gt;o&lt;/td&gt;
&lt;td&gt;Њ њ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ɔ/&lt;/td&gt;
&lt;td&gt;av&lt;strong&gt;ó&lt;/strong&gt;, fam&lt;strong&gt;o&lt;/strong&gt;sa&lt;/td&gt;
&lt;td&gt;Ɔ ɔ (not in Serbian)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/o/&lt;/td&gt;
&lt;td&gt;av&lt;strong&gt;ô&lt;/strong&gt;, fam&lt;strong&gt;o&lt;/strong&gt;so&lt;/td&gt;
&lt;td&gt;О о&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/õ/&lt;/td&gt;
&lt;td&gt;p&lt;strong&gt;õ&lt;/strong&gt;e&lt;/td&gt;
&lt;td&gt;Õ õ (not in Serbian)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/p/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;p&lt;/strong&gt;ó, so&lt;strong&gt;p&lt;/strong&gt;a&lt;/td&gt;
&lt;td&gt;П п&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ʁ/ /χ/ /x/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;r&lt;/strong&gt;io, ca&lt;strong&gt;rr&lt;/strong&gt;o, po&lt;strong&gt;r&lt;/strong&gt; favo&lt;strong&gt;r&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;X x (not in Serbian)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/r/ /ɾ/&lt;/td&gt;
&lt;td&gt;f&lt;strong&gt;r&lt;/strong&gt;io, ca&lt;strong&gt;r&lt;/strong&gt;o, po&lt;strong&gt;r&lt;/strong&gt; acaso&lt;/td&gt;
&lt;td&gt;Р р&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/s/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;s&lt;/strong&gt;aco, i&lt;strong&gt;ss&lt;/strong&gt;o, bra&lt;strong&gt;ç&lt;/strong&gt;o, má&lt;strong&gt;x&lt;/strong&gt;imo, e&lt;strong&gt;s&lt;/strong&gt;cola&lt;/td&gt;
&lt;td&gt;С с&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/z/&lt;/td&gt;
&lt;td&gt;ca&lt;strong&gt;s&lt;/strong&gt;a, o&lt;strong&gt;s&lt;/strong&gt;, do&lt;strong&gt;z&lt;/strong&gt;e, e&lt;strong&gt;x&lt;/strong&gt;istir&lt;/td&gt;
&lt;td&gt;S s (not in Serbian)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ʃ/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ch&lt;/strong&gt;ave, bai&lt;strong&gt;x&lt;/strong&gt;o, su&lt;strong&gt;sh&lt;/strong&gt;i&lt;/td&gt;
&lt;td&gt;Ш ш&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/tʃ/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;tch&lt;/strong&gt;au, ri&lt;strong&gt;t&lt;/strong&gt;mo, pon&lt;strong&gt;t&lt;/strong&gt;e&lt;/td&gt;
&lt;td&gt;Ч ч&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/t/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;t&lt;/strong&gt;empo, á&lt;strong&gt;t&lt;/strong&gt;omo&lt;/td&gt;
&lt;td&gt;Т т&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/u/&lt;/td&gt;
&lt;td&gt;r&lt;strong&gt;u&lt;/strong&gt;a, l&lt;strong&gt;ú&lt;/strong&gt;cido, sa&lt;strong&gt;ú&lt;/strong&gt;de&lt;/td&gt;
&lt;td&gt;У у&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/v/&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;v&lt;/strong&gt;ela, li&lt;strong&gt;v&lt;/strong&gt;ro&lt;/td&gt;
&lt;td&gt;В в (reused from /ʋ/, which is not in pt-BR)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Some example transliterations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Foi o cão que botou pra nós beber&lt;/em&gt;: Фoи у кɐo кi ботоу пра нɔс бебер.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Acho a velocidade um prazer de cretinos. Ainda conservo o deleite dos bondes que não chegam nunca.&lt;/em&gt;: Ашу а велосидаџi ун праsер џi кречинус. Аинда консэрву у делeчi дус бонџiс кi нɐo шегɐo нунка.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ao vencedor, as batatas&lt;/em&gt;: Aу вeнседор, ас бататас.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Nada separa as classes como a língua. Fora a renda, claro&lt;/em&gt;: Нада сепара ас класiс кому а лингуа. Фɔра а xeнда, клару.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Now that I had a clear specification of the script, I could put together some code to transliterate pt-BR from the Latin
to Serbilian Cyrilic. My weapon of choice for writing quick and dirty code for this was Ruby: loads of libraries and nice Unicode
support. The algorithm is pretty simple: grab the text in latin script, tokenize it, extract the IPA pt-BR pronounciation, convert
the phonemes to Serbilian, put the text together again.&lt;/p&gt;
&lt;p&gt;I used &lt;a href="https://github.com/diasks2/pragmatic_tokenizer"&gt;pragmatic_tokenizer&lt;/a&gt; for separating tokens and 
&lt;a href="http://espeak.sourceforge.net/"&gt;eSpeak&lt;/a&gt; for extracting the IPA pronounciation.
One interesting thing I found in during the implementation is that the case of a character depends on locale.
Ruby handles this by just not handling natively at all, i.e.: &lt;code&gt;'é'.upcase == 'é'&lt;/code&gt;. 
For this reason, I also used the &lt;a href="https://github.com/lang/unicode_utils"&gt;unicode_utils&lt;/a&gt; gem, which does the locale-aware conversion.&lt;/p&gt;
&lt;p&gt;I also got some &lt;a href="https://en.wikipedia.org/wiki/Pangram"&gt;pangrams&lt;/a&gt; from &lt;a href="http://clagnut.com/blog/2380/#Portuguese"&gt;this website&lt;/a&gt;to test out if I had at least most of the phonemes covered by my script. &lt;/p&gt;
&lt;p&gt;One shortcoming of this approach is that sounds in pt-BR that depend on the context ("por favor" vs "por acaso", where the "r" changes its sound when before a vowel on the next word) get the wrong phonetic transliteration. This is a though problem to tackle: either we give up on having a 1x1 phonetic transcription, or we get words that have multiple forms, depending on the next word on the phrase. I won't go there for my little fun project -- if you have an easy solution please let me know!&lt;/p&gt;
&lt;p&gt;Finally, the code:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/e9ab9c1e662f7e8db188c3a29515246a.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;logger&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pragmatic_tokenizer&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unicode_utils&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Serbilian&lt;/span&gt;
  &lt;span class="no"&gt;SINGLE_LETTER_WORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;à&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;ã&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɐ̃&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;â&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɐ̃&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;é&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;э&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;ê&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ó&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɔ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;ô&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;õ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;õ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;í&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;&amp;quot;u&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="no"&gt;PHONEME_TABLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;А&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;а&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;æ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;А&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;а&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɐ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;∀&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɐ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɐ̃&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;∀&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɐ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ã&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;∀&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɐ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;aɪ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Aи&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aи&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɐ̃ʊ̃&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;∀o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɐo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;aʊ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Aу&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aу&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Б&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;б&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Д&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;д&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dʒ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Џ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;џ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Е&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;е&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;eɪ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;E&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɛ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Э&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;э&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ə&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;f&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ф&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ф&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɡ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Г&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;г&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;И&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;и&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;iʊ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Иу&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;иу&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɪ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ј&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ј&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;j&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ј&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ј&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ʒ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ж&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ж&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;К&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;к&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Л&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;л&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ʎ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Љ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;љ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;m&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;М&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;м&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Н&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;н&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ŋ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Н&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;н&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɲ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Њ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;њ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;О&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;о&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;õ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Õ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;õ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;oɪ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Oи&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oи&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɔ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ɔ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ɔ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;П&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;п&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ɾ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Р&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;р&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Р&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;р&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ʁ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;С&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;с&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ʃ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ш&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ш&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Т&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;т&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tʃ&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ч&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ч&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ũ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;У&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ũ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;У&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ʊ&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;У&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ʊ̃&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;У&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;У&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;В&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;в&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;у&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;z&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="no"&gt;TOKENIZER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PragmaticTokenizer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tokenizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:language&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pt-br&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:downcase&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

  &lt;span class="no"&gt;LOGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;INFO&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;word?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[[:word:]]+/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;UnicodeUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;word_to_ipa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;single_letter_replacement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SINGLE_LETTER_WORDS&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;single_letter_replacement&lt;/span&gt;
      &lt;span class="n"&gt;single_letter_replacement&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="sx"&gt;%x{espeak -v pt-br --ipa=3 &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;&amp;quot; -q}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ipa_to_serbilian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;serbilian&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ipa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; 
      &lt;span class="n"&gt;clean_phoneme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ˈ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ˌ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PHONEME_TABLE&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean_phoneme&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="no"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;missing phoneme table entry for /&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;clean_phoneme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;
      &lt;span class="n"&gt;lcase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="n"&gt;serbilian&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lcase&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;chars&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;serbilian&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;UnicodeUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;word_to_serbilian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ipa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_to_ipa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;serbilian&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ipa_to_serbilian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upcase?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="no"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ipa&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;serbilian&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;serbilian&lt;/span&gt; 
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
      &lt;span class="n"&gt;next_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
      &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_token&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;word?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ptbr_to_serbilian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptbr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;LOGGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pt-br: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ptbr&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TOKENIZER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptbr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;word?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;word_to_serbilian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;join_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;test_pangrams&lt;/span&gt;
    &lt;span class="n"&gt;pangrams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Um pequeno jabuti xereta viu dez cegonhas felizes.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Blitz prende ex-vesgo com cheque fajuto.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Gazeta publica hoje no jornal uma breve nota de faxina na quermesse.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Zebras caolhas de Java querem passar fax para moças gigantes de New York.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Luís argüia à Júlia que brações, fé, chá, óxido, pôr, zângão eram palavras do português.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;À noite, vovô Kowalsky vê o ímã cair no pé do pingüim queixoso e vovó põe açúcar no chá de tâmaras do jabuti feliz.&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;pangrams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ptbr_to_serbilian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/noscript&gt;
&lt;/div&gt;</summary><category term="languages"></category><category term="cyrilic"></category><category term="serbian"></category><category term="portuguese"></category></entry><entry><title>Making XCode bearable: a plugin list</title><link href="http://hitnail.net/making-xcode-bearable-a-plugin-list.html" rel="alternate"></link><updated>2016-07-06T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2016-07-06:making-xcode-bearable-a-plugin-list.html</id><summary type="html">&lt;p&gt;Let's face it, using XCode in 2016 is a burden that iOS developers are forced to bear. 
All the crashes, the eternal indexing, the terrible refactoring functionality, the weird
build fails solved by re-opening the editor, the inability to (sometimes) run individual
unit tests, and other annoyances are already well-known by daily users of the tool.
To some, like me, switching to AppCode isn't a viable solution. The toolchain used by
the JetBrains suite still relies on XCode for many tasks, and you might end up switching between 
both IDEs most of the time.&lt;/p&gt;
&lt;p&gt;The awkwardness of the Apple development tools is understandable when looking at its history. 
OS X, and, more recently, iOS follow the lineage of the operating system developed by another
company by Steve Jobs, NeXT. A more detailed look on how the legacy of the &lt;a href="https://en.wikipedia.org/wiki/NeXTSTEP"&gt;NeXTSTEP operating system&lt;/a&gt;
is still living in our Macs and iPhones is available on this &lt;a href="http://arstechnica.com/apple/2012/12/the-legacy-of-next-lives-on-in-os-x/"&gt;Ars Technica article&lt;/a&gt;.
XCode is the successor of the NeXT development tools, bundling the 
&lt;a href="http://www.cilinder.be/docs/next/NeXTStep/3.3/nd/DevTools/03_InterfaceBuilder/InterfaceBuilder.htmld/index.html"&gt;Interface Builder&lt;/a&gt;
(the .nib extension used on Cocoa and Carbon interface files stands for &lt;em&gt;NeXT Interface Builder&lt;/em&gt;) and 
the &lt;a href="http://www.cilinder.be/docs/next/NeXTStep/3.3/nd/DevTools/02_ProjectBuilder/ProjectBuilder.htmld/index.html"&gt;Project Builder&lt;/a&gt;
(guess where the cluttered and unmergeable .pbxproj project format comes from).&lt;/p&gt;
&lt;p&gt;Although a notable and innovative development suite for its time -- Tim Berners-Lee used it to develop the first WorldWideWeb browser at the CERN -- it's still a piece of software designed in the late 80s.
Apart from adding support to new mobile platforms and programming languages, Apple hasn't done much 
to bring the development evironment to the 21st century. The featureset still lags behind contemporary alternatives,
like Microsoft's Visual Studio or even Google's Android Builder, which is based on IDEA's IntelliJ.
Luckily, some plugins can ease this suffering and fill some of the usability gaps left by the Cupertino company.&lt;/p&gt;
&lt;h3&gt;Alcatraz&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/alcatraz/Alcatraz"&gt;Alcatraz&lt;/a&gt; is a plugin manager for XCode and your
starting point on pimping up your development environment. Installing it is as simple as
running the install script found at &lt;code&gt;https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh&lt;/code&gt;.
The plugin manager window can be opened by the shortcut &lt;strong&gt;⌘ + ⇧ + 9&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alcatraz window" src="https://camo.githubusercontent.com/919efe4e1e53237df51d7010c862bd5c04fd6a70/687474703a2f2f616c63617472617a2e696f2f696d616765732f73637265656e73686f744032782e706e67" /&gt;&lt;/p&gt;
&lt;h3&gt;AutoHighlightSymbol&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/chiahsien/AutoHighlightSymbol"&gt;Auto Highlight Symbol&lt;/a&gt; improves drastically the
built-in symbol highlighting from XCode by using a configurable background color to highlight the text,
instead of the barely visible underlining.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Auto Highlight Symbol screenshot" src="https://github.com/chiahsien/AutoHighlightSymbol/raw/master/screenshot.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Backlight&lt;/h3&gt;
&lt;p&gt;One simple feature overlooked by the XCode text editor is highlighting the current line where the cursor is placed.
Luckily, the &lt;a href="https://github.com/limejelly/Backlight-for-XCode"&gt;Backlight&lt;/a&gt; plugin fixes that.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Backlight" src="https://raw.githubusercontent.com/limejelly/Backlight-for-XCode/master/screenshot.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Fuzzy Autocomplete&lt;/h3&gt;
&lt;p&gt;I always wondered why the autocomplete dialog from from XCode didn't use the same algorithm as the quick open
functionality (accessed at &lt;strong&gt;⌘ + ⇧ + O&lt;/strong&gt;). The &lt;a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin"&gt;FuzzyAutocomplete&lt;/a&gt; 
plugin does exactly that, using Xcode's own &lt;code&gt;IDEOpenQuicklyPattern&lt;/code&gt; to implement a better autocomplete algorithm. 
A &lt;a href="http://chen.do/blog/2013/10/22/reverse-engineering-xcode-with-dtrace/?utm_source=github&amp;amp;utm_campaign=fuzzyautocomplete"&gt;fascinating writeup by chendo&lt;/a&gt; explains how he used &lt;code&gt;dtrace&lt;/code&gt; to inspect what the infamous IDE is doing under the hood
and implement this great plugin.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fuzzy Autocomplete demo" src="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/raw/master/demo.gif" /&gt;&lt;/p&gt;
&lt;h3&gt;IconMaker&lt;/h3&gt;
&lt;p&gt;I've created the habit to curse Apple and their lack of love towards developers using their platform everytime I have to resize, crop 
and rename images to generate app icons. After dealing with a suite of imagemagick scripts, I've decided to use &lt;a href="https://github.com/kaphacius/IconMaker"&gt;IconMaker&lt;/a&gt; for the job. It adds a tool that allows on to easily create asset catalogs from a source image.&lt;/p&gt;
&lt;h3&gt;MCLog&lt;/h3&gt;
&lt;p&gt;A very necessary and basic feature lacking on XCode is filtering the output of the console.  Android developers can easily 
do that using UNIX tools such as &lt;code&gt;grep&lt;/code&gt;, but iOS developers are hostages to Apple's walled garden. 
&lt;a href="https://github.com/yuhua-chen/MCLog"&gt;MCLog&lt;/a&gt; comes to the rescue, adding a search bar to the bottom of the console that
allows the output of a running app to be filtered using regexes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="MCLog demo" src="https://camo.githubusercontent.com/ecbdebd01af366c9a7d3c3d0850a164f127030a9/68747470733a2f2f7261776769746875622e636f6d2f79756875612d6368656e2f4d434c6f672f6d61737465722f4d434c6f6753637265656e73686f742e676966" /&gt;&lt;/p&gt;
&lt;h3&gt;Peckham&lt;/h3&gt;
&lt;p&gt;Another basic IDE use-case overlooked by Apple on XCode that I'm sure most iOS developers will identify with, is 
scrolling all the way to the top of a source file to add new import statments.
&lt;a href="https://github.com/markohlebar/Peckham"&gt;Peckham&lt;/a&gt; solves that by adds a tiny menu with fuzzy autocompletion accessible by 
the &lt;strong&gt;⌘ + Ctrl + P&lt;/strong&gt; shortcut.&lt;/p&gt;</summary><category term="xcode"></category><category term="ios"></category><category term="osx"></category><category term="objective-c"></category></entry><entry><title>A list of symbols for keys found on most keyboards</title><link href="http://hitnail.net/a-list-of-symbols-for-keys-found-on-most-keyboards.html" rel="alternate"></link><updated>2016-06-28T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2016-06-28:a-list-of-symbols-for-keys-found-on-most-keyboards.html</id><summary type="html">&lt;p&gt;This is a handy list of symbols that can help a lot when laying down keyboard shortcuts on 
tutorials or README pages. The * marks symbols that are not commonly used; those keys
are usually referred by their names or an abbreviation.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;Ctrl/Control (Mac notation)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⎈&lt;/td&gt;
&lt;td&gt;Ctrl/Control (Unicode symbol)*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⇧&lt;/td&gt;
&lt;td&gt;Shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⇪&lt;/td&gt;
&lt;td&gt;Caps Lock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;↵&lt;/td&gt;
&lt;td&gt;Enter/Return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⎇&lt;/td&gt;
&lt;td&gt;Alt*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⌥&lt;/td&gt;
&lt;td&gt;Option (Alt on Mac)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;←&lt;/td&gt;
&lt;td&gt;Backspace*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⌫&lt;/td&gt;
&lt;td&gt;Delete (Backspace on Mac)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;↹&lt;/td&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⎋&lt;/td&gt;
&lt;td&gt;Esc*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⊞&lt;/td&gt;
&lt;td&gt;Win/Windows (Super on Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⌘&lt;/td&gt;
&lt;td&gt;Cmd/Command (Super on Mac)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary><category term="keyboards"></category><category term="unicode"></category></entry><entry><title>SDL dem0ns, or: a tiny emulat0r</title><link href="http://hitnail.net/sdl-dem0ns-or-a-tiny-emulat0r.html" rel="alternate"></link><updated>2016-03-20T00:00:00+01:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2016-03-20:sdl-dem0ns-or-a-tiny-emulat0r.html</id><summary type="html">&lt;p&gt;While writing my little l0dable, I faced a small inconvenient: compiling and flashing the
f1rmware at every iteration of the development. The easiest solution for this would be running the code on some kind of emulator for development purposes. With a little research, I found a mention of a &lt;a href="http://r0ket.de/l0dable"&gt;simulat0r for the r0ket&lt;/a&gt;. As much of the code of the rad1o standard library comes from the r0ket one, it shouldn't be difficult to run my l0dable with minor changes on this simulator. Turns out it wasn't the case.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;SDL dem0ns&amp;quot;" src="img/dem0ns-sdl.png" title="SDL dem0ns" /&gt;&lt;/p&gt;
&lt;p&gt;After a quick download-read-compile-run of the &lt;a href="https://github.com/r0ket/r0ket/tree/master/simulat0r"&gt;simulat0r code&lt;/a&gt;, I realized that the work of modfiying this existing code -- which provides much more than the l0dable environment, actually running the whole firmware -- would be more difficult than just writing a quick and dirty emulation layer providing the functions I used on dem0ns. I chose SDL for the job with portability in mind, so although I only tested this on OSX and Linux, this should run in most operating systems. The code can be found at &lt;a href="https://github.com/brunoro/dem0ns-sdl"&gt;github&lt;/a&gt; alongside my demons of the cyclic space implementation using it.&lt;/p&gt;</summary><category term="rad1o"></category><category term="cellular automata"></category><category term="sdl"></category></entry><entry><title>A Demons of the Cyclic Space l0dable for the rad1o</title><link href="http://hitnail.net/a-demons-of-the-cyclic-space-l0dable-for-the-rad1o.html" rel="alternate"></link><updated>2016-01-09T00:00:00+01:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2016-01-09:a-demons-of-the-cyclic-space-l0dable-for-the-rad1o.html</id><summary type="html">&lt;p&gt;I was one of the lucky ones that got hold of an amazing &lt;a href="https://rad1o.badge.events.ccc.de/"&gt;rad1o&lt;/a&gt; on the last &lt;a href="https://events.ccc.de/camp/2015/wiki/Main_Page"&gt;Chaos Communication Camp&lt;/a&gt;,
but, apart from following some &lt;a href="https://greatscottgadgets.com/sdr/"&gt;SDR tutorials&lt;/a&gt; and messing around with transmitting and recieving FM signals, I couldn't
invest much time in doing cool stuff using it.
After watching the amazing &lt;a href="https://media.ccc.de/v/32c3-7154-iridium_update"&gt;Iridium Update by sec and schneider&lt;/a&gt; at the &lt;a href="https://events.ccc.de/congress/2015/wiki/Static:Main_Page"&gt;32c3&lt;/a&gt;, I decided to roll up my sleeves and implement something)
(although not SDR related) to run on my rad1o. It'd be something neat looking yet quick to implement, that I could use to keep my badge's
display busy when I was walking around on the congress. One algorithm quickly popped to my mind: the Demons of Cyclic Space.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;it's alive!&amp;quot;" src="img/demons-rad1o.jpg" title="it runs!" /&gt;&lt;/p&gt;
&lt;h3&gt;Cyclic cycles in spaces&lt;/h3&gt;
&lt;p&gt;I first found out about this cellular automata though reading a collection of A.K. Dewdney's column "Computer Recreation" for Scientific American.
The algorithm described in the article, called "A cellular universe of debris, droplets, defects, and demons", and later on his book
&lt;a href="http://www.amazon.com/The-Magic-Machine-Handbook-Computer/dp/0716721449"&gt;"Computer Magic"&lt;/a&gt;, is pretty simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Populate a 2D grid with out of random &lt;em&gt;n&lt;/em&gt; states.&lt;/li&gt;
&lt;li&gt;At each step &lt;em&gt;t&lt;/em&gt;, for every position &lt;em&gt;p&lt;/em&gt; on the grid, check if any neighboring position (up, down, left, right) has the successor state &lt;em&gt;n + 1&lt;/em&gt;.
   The successiong of states is cyclic, so the successor of the state &lt;em&gt;n&lt;/em&gt; is the state &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If yes, the state of &lt;em&gt;p&lt;/em&gt; on step &lt;em&gt;t + 1&lt;/em&gt; becomes it's successor.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Writing a l0dable&lt;/h3&gt;
&lt;p&gt;The rad1o &lt;a href="https://github.com/rad1o/f1rmware"&gt;f1rmware&lt;/a&gt; provides an easy way to write small interactive applications that can use the built-in joystick and display things on
the tiny Nokia 6100 screen -- the l0dables. Those are C programs that get dynamically loaded by the f1rmware through a navigable menu.
Their entry point is the &lt;code&gt;void ram(void)&lt;/code&gt; function, that, for all effects, acts like the main method. The l0dable standard library is forked
from the one developed for the &lt;a href="http://www.r0ket.de/l0dable"&gt;r0cket&lt;/a&gt;, and provides a clear API for basic build blocks like handling the display
(initializing, drawing and closing), getting events from the joystick (4 directions + press), rendering fonts, etc.
I couldn't find any text documentation, but the &lt;a href="https://github.com/rad1o/f1rmware/blob/master/r0ketlib/display.h"&gt;source code&lt;/a&gt; is
&lt;a href="https://github.com/rad1o/f1rmware/blob/master/r0ketlib/keyin.h"&gt;available&lt;/a&gt; on &lt;a href="https://github.com/rad1o/f1rmware/blob/master/r0ketlib/fonts.h"&gt;github&lt;/a&gt;
and is a breeze to understand if you have some knowledge of C. &lt;/p&gt;
&lt;p&gt;Deploying a l0dable on your rad1o is as simple as including the name of your &lt;code&gt;.c&lt;/code&gt; file to the &lt;code&gt;C1D&lt;/code&gt; array on the firmware Makefile, compiling and flashing again.
Instructions on the dependencies and how to compile and flash the f1rmware can be found in the &lt;a href="https://github.com/rad1o/f1rmware/blob/master/doc/build.md"&gt;rad1o wiki&lt;/a&gt;.
Notice that the name displayed on the menu will be the name of the &lt;code&gt;.c1d&lt;/code&gt; file.&lt;/p&gt;
&lt;h3&gt;dem0ns&lt;/h3&gt;
&lt;p&gt;The implementation of the algorithm is pretty straightforward, but there are still some learnings worth highlighting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;memory size:&lt;/em&gt; the automata needs two buffers to run, in order to keep the state at &lt;em&gt;t&lt;/em&gt; and &lt;em&gt;t + 1&lt;/em&gt;. As a rookie in microcontroller
programming, I allocated two &lt;code&gt;uint8_t&lt;/code&gt; buffers with the size of the screen 130x130 straight away. As it happens, the rad1o wouldn't even
have memory one of such buffers. The solution involved using the video memory directly as the one of the buffers, and using a grain size of
at least 2 pixels -- meaning 2x2 blocks, or a buffer size of at most 65x65.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;color palette:&lt;/em&gt; in order to display the the automata on the screen, it's necessary to have a mapping between colors and state. To keep
things simple, I used a linear mapping to the 8-bit (RRRGGGBB) color representation used on the device, ignoring the color component information.
Surprisingly, this method yielded some pleasant colorschemes that I'd probably otherwise not think of myself.
An important part of this step is ensuring that the range of possible colors is a multiple of the numer of states, so that the modular arithmetic
works fine and the states cycle correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code for the l0dable is available on &lt;a href="https://github.com/brunoro/f1rmware/commit/a9818fa7e3af40f21f76bcf715da61e823682f8e"&gt;my fork of the f1rmware&lt;/a&gt;&lt;/p&gt;</summary><category term="rad1o"></category><category term="cellular automata"></category><category term="32c3"></category></entry><entry><title>Do Androids Dream In Pixels?</title><link href="http://hitnail.net/do-androids-dream-in-pixels.html" rel="alternate"></link><updated>2015-09-14T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2015-09-14:do-androids-dream-in-pixels.html</id><summary type="html">&lt;p&gt;So, almost 2 years since my last post, I finally have something worth sharing on machine burning again.
I'm starting a new project: &lt;a href="http://androidsdreaminpixels.tumblr.com"&gt;Do Androids Dream In Pixels?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="datamoshing to space" src="http://41.media.tumblr.com/2d4a0fdf711871718b2ebac71c40913a/tumblr_nwofskUntb1ugrpdno1_1280.png" /&gt;&lt;/p&gt;
&lt;p&gt;The idea is posting some experiments I've been doing with digital art, mostly glitches and neural networks.
Check it out!&lt;/p&gt;</summary><category term="glitch"></category><category term="art"></category><category term="machine learning"></category><category term="computer vision"></category></entry><entry><title>The Kepler-Bouwkamp Constant</title><link href="http://hitnail.net/the-kepler-bouwkamp-constant.html" rel="alternate"></link><updated>2013-10-14T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-10-14:the-kepler-bouwkamp-constant.html</id><summary type="html">&lt;p&gt;Follow this construction: draw a circle and inscribe a triangle inside it; inscribe a circle inside
this triangle and repeat the process, now inscribing a square. Continue this steps using pentagons,
hexagons, heptagons, etc.
The ratio between the radius of the outer circle and the inner limit circle is called the
&lt;a href="http://en.wikipedia.org/wiki/Kepler%E2%80%93Bouwkamp_constant"&gt;Kepler-Bouwkamp constant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As described by Adrian R. Kitson's paper &lt;a href="http://arxiv.org/abs/math/0608186"&gt;The prime analog of the Kepler-Bouwkamp constant&lt;/a&gt;,
that same steps can be done using other sequences, including that of prime numbers. 
On that article, Adrian derives the value of the constant, but doesn't include any image of the 
the construction that'd result from the process. &lt;/p&gt;
&lt;p&gt;&lt;img alt="The prime Kepler-Bouwkamp constant" src="img/prime-kepler-bouwkamp.png" /&gt;&lt;/p&gt;
&lt;p&gt;I really like those kind of constructions, so I implemented it using &lt;a href="https://github.com/quil/quil"&gt;Quil&lt;/a&gt;
to get an idea how it looks. Here comes the code:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/6984849.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;kepler-bouwkamp.core&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use&lt;/span&gt; &lt;span class="nv"&gt;quil.core&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;tau&lt;/span&gt; &lt;span class="mf"&gt;6.283185307179586&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;circle&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Draws a circle centered at (cx, cy) with radius r.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ellipse&lt;/span&gt; &lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;pivot&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;px&lt;/span&gt; &lt;span class="nv"&gt;py&lt;/span&gt; &lt;span class="nv"&gt;ox&lt;/span&gt; &lt;span class="nv"&gt;oy&lt;/span&gt; &lt;span class="nv"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Pivots (px, py) by angle using (ox, oy) as an axis.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zero? &lt;/span&gt;&lt;span class="nv"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;px&lt;/span&gt; &lt;span class="nv"&gt;py&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;nx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;px&lt;/span&gt; &lt;span class="nv"&gt;ox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;ny&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;py&lt;/span&gt; &lt;span class="nv"&gt;oy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;sin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Math/sin&lt;/span&gt; &lt;span class="nv"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nv"&gt;cos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Math/cos&lt;/span&gt; &lt;span class="nv"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;ox&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;nx&lt;/span&gt; &lt;span class="nv"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;ny&lt;/span&gt; &lt;span class="nv"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;oy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;nx&lt;/span&gt; &lt;span class="nv"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;ny&lt;/span&gt; &lt;span class="nv"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;)))])))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;polygon&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;radius&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Draws a polygon centered at (cx, cy) with the &lt;/span&gt;
&lt;span class="s"&gt;   given radius and number of sides.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;angle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;tau&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;ox&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doseq &lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range &lt;/span&gt;&lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt;
        &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;sx&lt;/span&gt; &lt;span class="nv"&gt;sy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pivot&lt;/span&gt; &lt;span class="nv"&gt;ox&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ex&lt;/span&gt; &lt;span class="nv"&gt;ey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pivot&lt;/span&gt; &lt;span class="nv"&gt;ox&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;line&lt;/span&gt; &lt;span class="nv"&gt;sx&lt;/span&gt; &lt;span class="nv"&gt;sy&lt;/span&gt; &lt;span class="nv"&gt;ex&lt;/span&gt; &lt;span class="nv"&gt;ey&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;ins-radius&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;radius&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="s"&gt;&amp;quot;Returns the inscribed radius of a polygon with&lt;/span&gt;
&lt;span class="s"&gt;   a given radius and number of sides.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;radius&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Math/cos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;tau&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;circle-inscribe-polygon&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;rad&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Draws a circle and the inscribed polygon with the given number&lt;/span&gt;
&lt;span class="s"&gt;   of sides, centered at (cx, cy) and with radius rad.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ins&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ins-radius&lt;/span&gt; &lt;span class="nv"&gt;rad&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;circle&lt;/span&gt; &lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;polygon&lt;/span&gt; &lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;rad&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;smooth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-rate&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;background&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;draw&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stroke&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stroke-weight&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nv"&gt;cy&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;rad&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min &lt;/span&gt;&lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="c1"&gt;; add some padding to the radius&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;circle-inscribe-polygon&lt;/span&gt; &lt;span class="nv"&gt;cx&lt;/span&gt; &lt;span class="nv"&gt;cy&lt;/span&gt; &lt;span class="nv"&gt;%1&lt;/span&gt; &lt;span class="nv"&gt;%2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;rad&lt;/span&gt; 
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt; &lt;span class="c1"&gt;; the sequence will converge before that&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;-main&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sketch&lt;/span&gt; 
    &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Kepler-Bouwkamp constant&amp;quot;&lt;/span&gt;
    &lt;span class="ss"&gt;:setup&lt;/span&gt; &lt;span class="nv"&gt;setup&lt;/span&gt;
    &lt;span class="ss"&gt;:draw&lt;/span&gt; &lt;span class="nv"&gt;draw&lt;/span&gt;
    &lt;span class="ss"&gt;:size&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/noscript&gt;
&lt;/div&gt;</summary><category term="clojure"></category><category term="quil"></category><category term="math"></category></entry><entry><title>Elixir: Debugging and Inspection - weeks 11 and 12</title><link href="http://hitnail.net/elixir-debugging-and-inspection-weeks-11-and-12.html" rel="alternate"></link><updated>2013-09-09T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-09-09:elixir-debugging-and-inspection-weeks-11-and-12.html</id><summary type="html">&lt;p&gt;The two final productive weeks of Debugging and Inspection on Summer of Code have been quite busy.
I've done a lot of refactoring on IEx code and added shiny new features to showcase
the power of the debugging infrastructure being developed.&lt;/p&gt;
&lt;h3&gt;Server-Evaluator-Reader&lt;/h3&gt;
&lt;p&gt;IEx, as of today, works using two processes: a Reader and a Server. 
The first waits for user input on &lt;code&gt;stdin&lt;/code&gt;, while the latter evaluates code and controls
the session. That way, evaluating code on IEx results on busy waiting: the Reader has 
to wait for an evaluation to finish before getting more input.&lt;/p&gt;
&lt;p&gt;Clearly, for a debugging environment, that's not the optimal behaviour. It's expected that
a debugger is able to get input from the user &lt;strong&gt;during&lt;/strong&gt; any code evaluation. 
&lt;code&gt;Server&lt;/code&gt; was refactored into an &lt;code&gt;Evaluator&lt;/code&gt;/&lt;code&gt;Server&lt;/code&gt; structure, and now we are ready to handle
those asynchronous debug events while evaluating anything.&lt;/p&gt;
&lt;h3&gt;Debug helpers&lt;/h3&gt;
&lt;p&gt;Finally some features! The current functionality embedded into the debugger is made available 
through IEx helpers. A list of the available helpers on the shell is printed using the &lt;code&gt;h&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The first helper introduced is the debug-compile helper &lt;code&gt;dc/2&lt;/code&gt;. Its interface is the same as the
&lt;code&gt;c/2&lt;/code&gt; helper, accepting a filename or a list of filenames as parameter. The files will be compiled with
debugging directives and a list of contained modules will be returned.&lt;/p&gt;
&lt;p&gt;Other two helpers provide pattern-based tracing, &lt;code&gt;dpg/0&lt;/code&gt; and &lt;code&gt;dps/1&lt;/code&gt; (debug-pattern-get/set).
The usage is simple: set a list of patterns for matching the source code being run and get debugger
ouput when it runs.
As patterns are matched &lt;strong&gt;after&lt;/strong&gt; sub-expressions are expanded, this tool can be very flexible, as shown
by running our &lt;code&gt;sum.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;defmodule Sum do
  def list(x // [1,2,3]) do
    Enum.reduce x, 0, fn
      (1, x) -&amp;gt; 1 + x
      (a, b) -&amp;gt; a + b 
    end
  end
end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get the following session:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Regex-based tracing" src="img/sumlist-dc-dpg-dps.png" /&gt;&lt;/p&gt;
&lt;p&gt;Currently it uses regular expressions over the output of &lt;code&gt;Macro.to_string&lt;/code&gt; on code tuples. 
José suggested a really cool feature using runtime tuple pattern-matching, yet to be done.
Another nice addition coming soon is be the breakpoint shell, which will allow running arbitrary 
code that changes process state on breakpoints.&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Elixir: Debugging and Inspection - weeks 9 and 10</title><link href="http://hitnail.net/elixir-debugging-and-inspection-weeks-9-and-10.html" rel="alternate"></link><updated>2013-08-26T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-08-26:elixir-debugging-and-inspection-weeks-9-and-10.html</id><summary type="html">&lt;p&gt;After last weeks' drama about anonymous functions, we could say that everything went well: the final
code wouldn't differ much from the current &lt;code&gt;defdebug&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; expressions.
On weeks 9 and 10 I've finally managed to write code to make all runtime tests pass, dealt with with 
non-debugged code interoperability, did some module name refactoring and rambled bit about a simple CLI.&lt;/p&gt;
&lt;h3&gt;Mystery on PIDland&lt;/h3&gt;
&lt;p&gt;The trouble of nested eval calls must have caused me some kind of &lt;strong&gt;evalception&lt;/strong&gt; trauma.
This last test related to the last features I've had implemented showed that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;defdebug msg_f2 do
  pid &lt;span class="o"&gt;=&lt;/span&gt; spawn fn &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    receive do
      &lt;span class="p"&gt;{&lt;/span&gt; from&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;msg &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        from &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;ack
    end
  end
  pid &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;msg &lt;span class="p"&gt;}&lt;/span&gt;
  receive do
    &lt;span class="o"&gt;:&lt;/span&gt;ack &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;ok
  end
end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this piece of code would either result in a perfect &lt;code&gt;:ok&lt;/code&gt; or on a process hanging on a &lt;code&gt;receive&lt;/code&gt;
expression with an &lt;code&gt;:EXIT&lt;/code&gt; message from a process with an unknown PID. Deeply disturbing.
Inspecting stuff on that code revealed another problem: the escaping functions wouldn't
iterate deeply on data structures, so that &lt;code&gt;{ self, :msg }&lt;/code&gt; wouldn't get escaped properly, and that
&lt;code&gt;self&lt;/code&gt; PID would never get matched on receive. Bingo!&lt;/p&gt;
&lt;h3&gt;Escape to the hills&lt;/h3&gt;
&lt;p&gt;On the beginning of the project I thought that escaping was the lesser of my concerns. 
That, however, proved to be wrong, as PIDs and then anonymous functions can't be injected inside an Elixir
quoted syntax tree.
My first solution, always escaping the result of evaluated code, seemed to be definitive until interoperability
with non-debugged code became a concern.
One solution was obvious at this point: evaluated values should always be the same as the results yielded from
a non-debugging run, so escaping should be done before evaluating!&lt;/p&gt;
&lt;p&gt;At that point, &lt;code&gt;Runner.eval_quoted&lt;/code&gt; had some code extracted that became &lt;code&gt;Runner.escape_and_eval&lt;/code&gt;.
Some function calls were changed, as not every eval call on the runtime would require escaping.
For my surprise, after solving the escaping related problems, that message passing test passed and we got
0 failures (:&lt;/p&gt;
&lt;h3&gt;Major Tom to Ground Control&lt;/h3&gt;
&lt;p&gt;The design of a CLI involved creating a &lt;code&gt;Controller&lt;/code&gt; module that will interact with &lt;code&gt;Runner&lt;/code&gt;, giving
the heads up for process execution.
But what about our good old &lt;code&gt;Controller&lt;/code&gt; module, that only serves to the purpose of keeping the 
state of a process? Well, guess what, it is now called &lt;code&gt;StateServer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The CLI is very simple: when a &lt;code&gt;Controller&lt;/code&gt; process gets notified by a running process that
an expression is about to be executed, an IO loop starts and a command is read. 
The running process has to wait for authorization before continuing, that way we will be able to
implement more advanced stepping and breakpoints by tweaking the protocol between those processes.&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Elixir: Debugging and Inspection - weeks 7 and 8</title><link href="http://hitnail.net/elixir-debugging-and-inspection-weeks-7-and-8.html" rel="alternate"></link><updated>2013-08-12T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-08-12:elixir-debugging-and-inspection-weeks-7-and-8.html</id><summary type="html">&lt;p&gt;The second half of the GSoC program started with the Elixir debugger beginning to show some stability.
Some of the challenges foreseen when taking the decision on the metaprogramming-based design have been solved,
but other tricky control-flow structures involving exception handling and multiprocessing now have to be tackled.&lt;/p&gt;
&lt;h3&gt;Rescue catching or keep trying&lt;/h3&gt;
&lt;p&gt;Exceptions require a lot of caution on their handling: the debugger should isolate its own exceptions from
those raised withing the interpreted program.
With that goal in mind some refactoring work was needed to tag and enclose the &lt;code&gt;:elixir.eval_quoted&lt;/code&gt; calls
on a rescue-all block.&lt;/p&gt;
&lt;p&gt;The expression building trick used to emulate variable initialization used for case expressions
showed itself an amazing tool for implementing many constructs of Elixir on the debugger runtime.
However, this pattern couldn't be used for matching variables on rescue/catch clauses, as, differently
from case clauses, the names defined inside exception-handling blocks don't persist on the rest of the
program.&lt;/p&gt;
&lt;p&gt;An example illustrates better this behaviour:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def foo do
  try do
    raise &amp;quot;message&amp;quot;
  rescue
    x in [RuntimeError] -&amp;gt;
      x.message # =&amp;gt; &amp;quot;message&amp;quot;
  end
  x  # =&amp;gt; ERROR: x not alive here
end

def bar do
  case &amp;quot;message&amp;quot; do
    x -&amp;gt; x # =&amp;gt; &amp;quot;message&amp;quot;
  end
  x  # =&amp;gt; x is alive here, equals to &amp;quot;message&amp;quot;)
end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To avoid implementing the semantics for rescue/catch, we resorted to the before dreaded nested eval calls.
That strategy worked pretty well with some rough edges yet to be rounded, mainly coming from this &lt;strong&gt;evalception&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Private mode&lt;/h3&gt;
&lt;p&gt;I have foreseen anonymous functions somehow as bump on the road while nested eval calls were ruled out of the options.
After the change on the structure of Evaluators/Coordinators/Runners, that approach became again the perfect fit
for implementing &lt;code&gt;fn -&amp;gt; (...) end&lt;/code&gt; constructs.&lt;/p&gt;
&lt;p&gt;The next weeks will host a lot of effort on anonymous functions and polishing try/rescue/catch expressions,
and hopefully the first version of the debugger shell.&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Elixir: Debugging and Inspection - weeks 5 and 6</title><link href="http://hitnail.net/elixir-debugging-and-inspection-weeks-5-and-6.html" rel="alternate"></link><updated>2013-07-29T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-07-29:elixir-debugging-and-inspection-weeks-5-and-6.html</id><summary type="html">&lt;p&gt;The last two weeks have been quite busy Elixir debugging: the project has seen a fair amount of changes 
on the design side and many practical issues came up. 
All that had to do with implementing debugging of programs using multi-processing directives, 
which are the most important and distinctive features of Elixir.&lt;/p&gt;
&lt;h3&gt;Evaluators, Coordinators and Runners&lt;/h3&gt;
&lt;p&gt;On our previous design, an &lt;code&gt;Evaluator&lt;/code&gt; would responsible for keeping the state of a current process and evaluate code on its behalf.
That idea worked quite well when not dealing with message sending for one basic reason: with code actually running on another process,
the PID (process identifier) and the mailbox being used for message passing wouldn't be that of the process being evaluated.
On that context, switching from &lt;strong&gt;interpreted&lt;/strong&gt; to &lt;strong&gt;native&lt;/strong&gt; running modes would be very tricky, as all PIDs would have to be translated
from host to Evaluator and vice-versa.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Coordinator&lt;/code&gt;/&lt;code&gt;Runner&lt;/code&gt; structure would fit much better the problem: the first process would be the bridge between the user interface
and the running code, keeping the state of the code evaluation for the possiblity of inspection; 
the latter would evaluate it's own expressions while waiting for the approval of its &lt;code&gt;Coordinator&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Such a pid thing to do&lt;/h3&gt;
&lt;p&gt;A practical problem faced recently was injecting PID literals on an Elixir tree -- there's no thing such as PID literals.
The approach used by the interpreter being implemented is to depth-first search on the quoted expressions and backtrack
the values of sub-expressions by replacing them on the tree with the result of their evaluations.
So, when the value of an expression is a process identifier, &lt;code&gt;:elixir.eval_quoted&lt;/code&gt; would return something that looks like
&lt;code&gt;#PID&amp;lt;0.27.0&amp;gt;&lt;/code&gt;, which is clearly not valid Elixir syntax and would yield the infamous &lt;code&gt;invalid quoted expression: #PID&amp;lt;0.27.0&amp;gt;&lt;/code&gt;
when interpreted.&lt;/p&gt;
&lt;p&gt;The solution to that problem would require a bit of name mangling and corner case handling.
PIDs have to be provided to the binding just after they're evaluated, as there's no literal representation for them&lt;sup&gt;1&lt;/sup&gt;, so
with some name mangling we generate a very distinctive variable name for a process identifier and filter everything coming
off our slick &lt;code&gt;:elixir_code.eval_quoted&lt;/code&gt; calls.
In the end, turning &lt;code&gt;#PID&amp;lt;0.27.0&amp;gt;&lt;/code&gt; into a variable called &lt;code&gt;__PID_0_27_0__&lt;/code&gt; bound to the PID's value (and not a representation) pretty
much solves the problem.&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;&lt;sup&gt;1&lt;/sup&gt;well, as a matter of fact one could use a char list as a PID literal using the &lt;code&gt;list_to_pid/1&lt;/code&gt; and &lt;code&gt;pid_to_list/1&lt;/code&gt; functions,
but that'd just make things get more complex.&lt;/sub&gt;&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Elixir: Debugging and Inspection - week 4</title><link href="http://hitnail.net/elixir-debugging-and-inspection-week-4.html" rel="alternate"></link><updated>2013-07-14T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-07-14:elixir-debugging-and-inspection-week-4.html</id><summary type="html">&lt;p&gt;This week all the last pretty printing issue was solved, thanks to a pretty cool solution proposed by
José (my mentor on the project). 
More details about the solution, based on changing a bit the way the algorithm decides between formatting
a document on &lt;code&gt;:flat&lt;/code&gt; or &lt;code&gt;:break&lt;/code&gt; mode, are available on the 
&lt;a href="https://github.com/elixir-lang/elixir/commit/2dc1e41aca4b456ee7644f3c4c97a2205f0df36b"&gt;commit that closed the issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some advance was made regarding the design of the debugger and how to achieve the desired functionalities.
My initial idea was to implement an Elixir interpreter based on quoted expressions, and then insert debugging functionalities
on top of that runtime, similar to the way OTP's &lt;a href="http://www.erlang.org/doc/apps/debugger/debugger_chapter.html"&gt;debugger&lt;/a&gt; is built.
That approach would enable total control over code execution and provide a sandboxed environment for debugging.
However, emulating Elixir's semantics would require a large amount of effort that could be avoided with a design based on meta-programming.&lt;/p&gt;
&lt;p&gt;The idea of using meta-programming to solve the problem is to inject message passing calls to &lt;em&gt;Evaluators&lt;/em&gt;, processes spawned to 
handle function calls for modules running on &lt;em&gt;debug&lt;/em&gt; mode, on the programs to be debugged.
That way, &lt;em&gt;Evaluators&lt;/em&gt; can access the current running scope and are able to provide inspecting information and manipulate
the control flow as requested by the debugger interface.&lt;/p&gt;
&lt;p&gt;As a starting point to that approach, I'm implementing a proof of concept that provides a &lt;code&gt;defdebug&lt;/code&gt; macro, which allows stepping
the execution of the defined function.&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Elixir: Debugging and Inspection - week 3</title><link href="http://hitnail.net/elixir-debugging-and-inspection-week-3.html" rel="alternate"></link><updated>2013-07-08T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-07-08:elixir-debugging-and-inspection-week-3.html</id><summary type="html">&lt;p&gt;The third week of my GSoC project featured the &lt;a href="https://github.com/elixir-lang/elixir/pull/1377"&gt;pretty printer&lt;/a&gt; being merged into upstream.
This is quite exciting for me, as it's my first expressive contribution to an open source project (:&lt;/p&gt;
&lt;p&gt;An &lt;a href="https://github.com/elixir-lang/elixir/issues/1383"&gt;issue&lt;/a&gt; was raised on the behavior of the pretty printer when printing lists.
This kind of output is expected from the Wadler pretty printing algorithm, as it can seen on the Ruby implementation as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;irb(main):001:0&amp;gt; require &amp;#39;pp&amp;#39;
=&amp;gt; true
irb(main):002:0&amp;gt; pp (1..100).to_a
[1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
# ...and so on
 90,
 91,
 92,
 93,
 94,
 95,
 96,
 97,
 98,
 99,
 100]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Hughes algorithm implementation present on OTP, despite less performant, allows that kind of fluid paragraph-like 
documents to be produced.
I'm still trying to think of any way of tweaking the Wadler algorithm to solve the issue.&lt;/p&gt;
&lt;p&gt;This week I also started making my way through OTP's &lt;code&gt;dbg&lt;/code&gt; source code and trying out some Erlang debugging tools. 
Maybe one of these days a quick survey about those tools will pop up here on the blog. &lt;/p&gt;
&lt;p&gt;Oh, and I survived finals week and will hand over my last college assignments today, which means full-time Elixir'ing
on the weeks to come!&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Elixir: Debugging and Inspection - week 2</title><link href="http://hitnail.net/elixir-debugging-and-inspection-week-2.html" rel="alternate"></link><updated>2013-07-01T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-07-01:elixir-debugging-and-inspection-week-2.html</id><summary type="html">&lt;p&gt;Not much going on this week on my GSoC project, mainly due to the finals season on my university. Besides studying to exams my class assignments kept me busy with &lt;a href="https://gist.github.com/brunoro/5894145"&gt;cryptography-related&lt;/a&gt; &lt;a href="https://gist.github.com/brunoro/5893701"&gt;algorithms&lt;/a&gt;, &lt;a href="https://bitbucket.org/brunoro/aes-webcl"&gt;AES on WebCL&lt;/a&gt; and &lt;a href="https://bitbucket.org/brunoro/clone-constant-args"&gt;LLVM passes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Brace yourselves, finals are coming&amp;quot;" src="http://farm3.staticflickr.com/2681/4407477295_c124d447fb.jpg" title="Finals, serious business." /&gt;&lt;/p&gt;
&lt;p&gt;I started adjusting the code on the pretty-printer pull request to use the new defrecordp syntax on Elixir. Also, there's some documentation pending on the public interface of the Binary.Inspect.Utils functions&lt;/p&gt;
&lt;p&gt;My goal is to have the code merged on upstream until the end of the week, so I can start working on ANSI colors on the pretty-printer and crafting some inspeaction helpers for iex.&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Elixir: Debugging and Inspection - week 1</title><link href="http://hitnail.net/elixir-debugging-and-inspection-week-1.html" rel="alternate"></link><updated>2013-06-23T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-06-23:elixir-debugging-and-inspection-week-1.html</id><summary type="html">&lt;p&gt;Today was over the first week of development of Summer of Code, and I worked mostly getting pretty-printing on Elixir. 
There was already a &lt;a href="https://github.com/elixir-lang/elixir/pull/1047"&gt;pull request&lt;/a&gt; implementing the algorithm proposed 
by &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.635"&gt;Wadler (2003)&lt;/a&gt;, but some performance issues still needed
to be taken care of before merging it to upstream.&lt;/p&gt;
&lt;p&gt;After reading the &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2200"&gt;Lindig (2000)&lt;/a&gt; paper on the exponential behaviour 
of the Wadler pretty printer on strict languages, I figured it could be the main issue, as the original implementation relies on Haskell's lazy evaluation.
I adapted the &lt;code&gt;wadler.ex&lt;/code&gt; module from the pull request to follow the OCaml implementation proposed by Lindig. 
As those tweaks didn't bring any performance gains, I moved on profiling the code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;First attempt at optimizing the pretty-printer&amp;quot;" src="img/gsoc-week1-small.png" title="Oops, no performance gains with Lindig approach." /&gt;&lt;/p&gt;
&lt;p&gt;Profiling showed that the exponential behaviour on the code arouse from the usage of the string concatenation operator in Elixir, 
which has performance linear on length of the left-hand string. Therefore, I patched both pretty printing implementations (Wadler's and Lindig's) 
to build lists of strings and make a one single &lt;code&gt;List.join&lt;/code&gt; call at the end of the process. Those changes made the pretty printer show the expected 
linear behaviour, and the strict implementation showed better performance than the one original lazy one.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;String concatenation was the problem&amp;quot;" src="img/gsoc-week1-big.png" title="Linear at last, removing string concatenation." /&gt;&lt;/p&gt;
&lt;p&gt;Some optimizations followed: @devinus pointed out that using &lt;code&gt;iolist_to_binary&lt;/code&gt; would bring even more performance gains over &lt;code&gt;List.join&lt;/code&gt;, 
and that using &lt;code&gt;List.duplicate&lt;/code&gt; over &lt;code&gt;String.duplicate&lt;/code&gt; to generate indent strings would also make the pretty printer faster. 
I benchmarked the suggestions, and indeed the version using &lt;code&gt;iolist_to_binary&lt;/code&gt; got better results. &lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;iolist_to_binary over List.join&amp;quot;" src="img/gsoc-week1-join.png" title="String list joining: serious business" /&gt;&lt;/p&gt;
&lt;p&gt;However, a strange fact came up measuring &lt;code&gt;List.duplicate&lt;/code&gt; vs &lt;code&gt;String.duplicate&lt;/code&gt;: the usage List.duplicate brought back the exponential 
performance to the function. Profiling showed that the &lt;code&gt;List.duplicate&lt;/code&gt; version ended up making a massive amount of &lt;code&gt;:lists.duplicate/3&lt;/code&gt; calls; 
to check that, I changed the &lt;code&gt;List.duplicate&lt;/code&gt; call to an equivalent &lt;code&gt;:lists.duplicate/2&lt;/code&gt; call, and the number of &lt;code&gt;:lists.duplicate/3&lt;/code&gt; got back to normal! 
@josevalim pointed that we should keep the &lt;code&gt;:lists.duplicate/2&lt;/code&gt; version of the code and further investigate the behaviour or List.duplicate afterwards.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;strange List.duplicate behaviour&amp;quot;" src="img/gsoc-week1-dup.png" title="List.duplicate just calls :lists.duplicate. Oh, wait..." /&gt;&lt;/p&gt;
&lt;p&gt;The regression tests for the new implmentation were getting stuck on some Mix tests, which were caused by inspect calls relying on unformatted string results. 
I've added the pretty: false option to all the Kernel.inspect calls on Mix, but the tests still failed. After that, I've verified that the &lt;code&gt;pretty: false&lt;/code&gt; 
option had to be reimplemented, which resulted on adding a corner case to the &lt;code&gt;Wadler.fits?&lt;/code&gt; and &lt;code&gt;Wadler.format&lt;/code&gt; methods to handle lines with "infinite width", 
disabling any formatting done by the pretty printer.&lt;/p&gt;
&lt;p&gt;There are still two pending issues to merge the pretty printer on upstream:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Making the records used on wadler.ex private. I'm still wondering about the best way to handle the typespecs with defrecordp, which doesn't generate types.&lt;/li&gt;
&lt;li&gt;Documenting the Binary.Inspect.Util module, which contain functions that'll be made public, allowing custom pretty printers to be written.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The benchmark code I used is available &lt;a href="https://gist.github.com/brunoro/5786164"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>Debugging and Inspecting Elixir on Summer of Code 2013!</title><link href="http://hitnail.net/debugging-and-inspecting-elixir-on-summer-of-code-2013.html" rel="alternate"></link><updated>2013-05-27T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2013-05-27:debugging-and-inspecting-elixir-on-summer-of-code-2013.html</id><summary type="html">&lt;p&gt;Just a really quick update with great news: the project I pitched to &lt;a href="http://beamcommunity.github.com/"&gt;BEAM Community&lt;/a&gt; 
was accepcted on &lt;a href="google-melange.com/gsoc/homepage/google/gsoc2013"&gt;Google Summer of Code 2013&lt;/a&gt;! 
This means that until 15 September I'll be quite busy developing code inspection tools and a basic 
CLI debugger functionality for the great &lt;a href="http://www.elixir-lang.org"&gt;Elixir&lt;/a&gt; language.&lt;/p&gt;
&lt;p&gt;Also, this blog see some love at least for the next weeks, as I'll post weekly reports on the state of the project here (:&lt;/p&gt;</summary><category term="gsoc2013"></category><category term="elixir"></category></entry><entry><title>NVIDIA blob, Macbook 7,1 and EFI boot</title><link href="http://hitnail.net/nvidia-blob-macbook-71-and-efi-boot.html" rel="alternate"></link><updated>2012-11-07T00:00:00+01:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2012-11-07:nvidia-blob-macbook-71-and-efi-boot.html</id><summary type="html">&lt;p&gt;The user experience for a developer under Linux is way more flexible than under Mac OS X,
specially talking about package management, which is light-years more evolved on the open
source world. But, on the other hand, some hassle can be experienced from bad hardware 
support and buggy drivers. That's definetely the case with the NVIDIA 320m card on the 
Macbook 7,1 using a EFI boot. The lack of support of the NVIDIA drivers is already known
from many recent facts such as &lt;a href="ihttp://www.youtube.com/watch?v=MShbP3OpASA"&gt;that Linus Torvalds interview&lt;/a&gt; 
and the &lt;a href="http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTEyNTE"&gt;10 million GPU order&lt;/a&gt; they've lost to AMD.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;A picture is worth a thousand words&amp;quot;" src="img/fuck-you-nvidia.jpg" title="A picture is worth a thousand words" /&gt;&lt;/p&gt;
&lt;p&gt;Apple decided to ship the Macbooks using a different boot technology than the old BIOS that
we see on most hardware; Mac OS X boots using a wonky EFI (Extended Firmware Interface) implementation.
That said, it does not use the old MBR partition tables, but the more flexible GUID Partition Tables.
Not to care about the true intentions of switching to EFI boot and the bizarre hybrid MBR setup Apple
proposes for booting Windows and other legacy software (sic), the main issue resides on the fact that
the proprietary NVIDIA driver reads&lt;/p&gt;
&lt;p&gt;Some precious information regarding booting from UEFI devices may be found on the &lt;a href="https://help.ubuntu.com/community/UEFIBooting"&gt;Ubuntu documentation&lt;/a&gt;. There are quite a few forum threads with no conclusive answers about this issue, such as
&lt;a href="http://www.nvnews.net/vbulletin/showthread.php?t=180737&amp;amp;highlight=linux+EFI"&gt;this one&lt;/a&gt;, &lt;a href="http://forums.gentoo.org/viewtopic-p-7071700.html?sid=57d7b854338e2647b9ba910f7674263a"&gt;this one&lt;/a&gt; and &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=142664"&gt;this one&lt;/a&gt; only to mention a few. A NVIDIA developer already spoke about
the problem at &lt;a href="http://www.nvnews.net/vbulletin/showthread.php?t=174006&amp;amp;page=2&amp;amp;highlight=linux+EFI"&gt;nvnews forum thread&lt;/a&gt; saying that they have plans on addressing it.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;nouveau&lt;/strong&gt; reverse engineered driver does an excellent job for daily use of the machine. The lack
of support of the official driver closes the door to massive parallel CUDA programming, and also causes 
bad perfomance when up to OpenGL development and playing games, as hardware acceleration
is very much needed to guarantee a smooth ride on those applications.&lt;/p&gt;
&lt;p&gt;It's quite a shame that NVIDIA still haven't fixed this issue on a 2009 machine, given that
the UEFI booting is to become the standard for newer hardware. Also, gaming on Linux is getting
a lot of attention with &lt;a href="http://www.phoronix.com/scan.php?page=article&amp;amp;item=valve_linux_dampfnudeln&amp;amp;num=1"&gt;Valve's initiative&lt;/a&gt;
and the great &lt;a href="http://humblebundle.com"&gt;Humble Indie Bundle&lt;/a&gt; with great games for the platform.&lt;/p&gt;
&lt;p&gt;This whole experience just showed me that getting Apple hardware, despite its beauty and hype factor,
may not be a good option if you have plans on using it as a serious Linux box.&lt;/p&gt;</summary><category term="linux"></category><category term="osx"></category><category term="macbook"></category><category term="efi"></category><category term="nvidia"></category></entry><entry><title>Hello from Emacsland</title><link href="http://hitnail.net/hello-from-emacsland.html" rel="alternate"></link><updated>2012-09-19T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2012-09-19:hello-from-emacsland.html</id><summary type="html">&lt;p&gt;This is my first post from the Emacs (+ Markdown mode) side of the world. Muscle memory still
tricks me many times with :wq and :%s lapses, but I must say: it feels good.
The Finger yoga can be quite tricky when coming from the distinct vi-style editing
logic.&lt;/p&gt;
&lt;p&gt;&lt;img alt="POV of this post" src="img/meta-emacs-post-image.png" /&gt;&lt;/p&gt;
&lt;p&gt;I'm still setting up my environment (including getting wombat instead of this bizarre colorscheme), 
but my main concern now is grasp this distinct buffer mobility. 
This &lt;a href="http://hyperpolyglot.org/text-mode-editors"&gt;hyperpolyglot.org page on text editors&lt;/a&gt; has shown
itself amazingly useful.&lt;/p&gt;
&lt;p&gt;I'll draft a new post when I get to show off one of those
&lt;a href="http://www.youtube.com/watch?v=EQAd41VAXWo"&gt;amazing emacs tricks&lt;/a&gt;.&lt;/p&gt;</summary><category term="emacs"></category><category term="text editor"></category></entry><entry><title>Linux on a Macbook part II: the drill</title><link href="http://hitnail.net/linux-on-a-macbook-part-ii-the-drill.html" rel="alternate"></link><updated>2012-07-06T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2012-07-06:linux-on-a-macbook-part-ii-the-drill.html</id><summary type="html">&lt;p&gt;The Arch Linux installation process wasn't much different on a Macbook than it would be on another laptop.
Installing the bootloader comes as the main issue, but even though it was quickly solved. It's always helpful
to have another device connected to the internet so you can read the &lt;a href="https://wiki.archlinux.org/index.php/MacBook"&gt;Arch&lt;/a&gt; 
and &lt;a href="http://en.gentoo-wiki.com/wiki/Apple_Macbook"&gt;Gentoo&lt;/a&gt; Macbook wiki pages during the process.
Also, you'll need wired internet access on some steps of the installation.&lt;/p&gt;
&lt;p&gt;Start by downloading the core iso at archlinux.org and burning it on a CD. 
I have not tried to boot from a USB flash drive. Boot it on your Macbook by holding the C key on startup.
When you get a working shell, it's time to partition the hard drive using a GPT table. You won't be able
to this using the bundled cfdisk application, so connect to the internet and install cgdisk from the gptfdisk package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# connect to the internet
$ dhcpcd
# install the package
$ pacman -Sy gptfdisk
# partition your main disk
$ cgdisk /dev/sda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should create a separate /boot partition. For instance, my disk looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Name    Type    Size 
----    ----    ----
EFI     vfat    200Mb
boot    ext2    100Mb
swap    swap    2Gb
root    ext4    60Gb
home    ext4    170Gb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now start the installation running /arch/setup. Select your timezone and your system clock looks fine with UTC time.
On the prepare hard disk step just create the filesystems on the partition table you created before.
Keep the setup normally until the bootloader step - &lt;strong&gt;don't install a bootloader&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Quit the arch setup menu and return to the shell. Install UEFI version of GRUB2 following the 
&lt;a href="https://wiki.archlinux.org/index.php/Grub2"&gt;guide on the Arch wiki&lt;/a&gt;. Run to generate the config files needed to boot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we just need to tell the built-in bootloader that our GRUB2 is bootable. 
To do this go fetch your Mac OS X install disk and boot from it. Select your
language and then open Terminal.app, it should be on the top menu under &lt;em&gt;Utils/Terminal.app&lt;/em&gt;.
You're going to &lt;em&gt;bless&lt;/em&gt; your boot partition (the filenames depend on the previous step):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bless --mount&lt;span class="o"&gt;=&lt;/span&gt;/Volumes/EFI  --file&lt;span class="o"&gt;=&lt;/span&gt;/Volumes/EFI/efi/arch/grub-x86_64.efi --setBoot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now your Arch Linux should boot from GRUB2 after a couple of seconds stuck on the blue-ish EFI screen.
The next challeng is the post-install party, get your energy drinks.&lt;/p&gt;</summary><category term="linux"></category><category term="osx"></category><category term="macbook"></category></entry><entry><title>I'm giving emacs a shot</title><link href="http://hitnail.net/im-giving-emacs-a-shot.html" rel="alternate"></link><updated>2012-06-24T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2012-06-24:im-giving-emacs-a-shot.html</id><summary type="html">&lt;p&gt;Since the beggining of my adventures on the Lisp side of the universe with Clojure and Scheme,
I've seen a lot of tutorials made by developers with seemly ninja skills on emacs doing some
magical text editing (for instance &lt;a href="http://vimeo.com/22798433"&gt;this one from Sam Aaron&lt;/a&gt;).
But after seeing a live showcase of the emacs possibilities for LaTeX editing, similar to 
&lt;a href="http://www.youtube.com/watch?v=LJgOWxwrEMw"&gt;this video&lt;/a&gt;, I really got motivated to give emacs
a fresh try.&lt;/p&gt;
&lt;p&gt;So, I'm starting to learn the emacs-fu and finger yoga in order to get to reproduce that workflow
at least for my Clojure and LaTex needs. Initally I'll try not to use any vim-like solution for emacs
such as &lt;a href="http://emacswiki.org/emacs/ViperMode"&gt;Viper&lt;/a&gt; and &lt;a href="http://emacswiki.org/emacs/Evil"&gt;Evil&lt;/a&gt;.
My goal is to have some strong emacsy editing skills in order to compare the achievable productivity of both.&lt;/p&gt;
&lt;p&gt;I have to say that the emacs community seems much more aware of the capabilities of the tool. It is
still kept like a hidden treasure under the siege of a Lisp dialect.&lt;/p&gt;</summary><category term="emacs"></category><category term="text editor"></category></entry><entry><title>Linux on a Macbook part I: the fair jugdement</title><link href="http://hitnail.net/linux-on-a-macbook-part-i-the-fair-jugdement.html" rel="alternate"></link><updated>2012-06-04T00:00:00+02:00</updated><author><name>gus</name></author><id>tag:hitnail.net,2012-06-04:linux-on-a-macbook-part-i-the-fair-jugdement.html</id><summary type="html">&lt;p&gt;It wasn't hard to embrace Mac OS X when I bought my Macbook, back in 2010.
It's a very good looking and practical UNIX flavor running on sexy designed hardware.
And it is pretty usable out-of-the box, unless you like tweaking your system to the last 
variable and compiler flag, like many of us Linux people like to.&lt;/p&gt;
&lt;p&gt;Everything seemed fine although kind of awkward on my Mac OS X setup. I even got used to the
pain of not having a proper package manager (&lt;a href="https://github.com/mxcl/homebrew"&gt;Homebrew&lt;/a&gt;, 
you're awesome, but still no &lt;a href="https://wiki.archlinux.org/index.php/Pacman"&gt;pacman&lt;/a&gt; + 
&lt;a href="https://wiki.archlinux.org/index.php/Arch_Build_System"&gt;ABS&lt;/a&gt;.
I had &lt;a href="https://github.com/fikovnik/ShiftIt"&gt;ShiftIt&lt;/a&gt; and Spaces helping me emulate an efficient
window manager and got used to the Mac way of not letting you have things the way you want. 
I could enjoy having all the fancy transitions/eye-candy and yet be confortable with my beloved 
geeky environiment.&lt;/p&gt;
&lt;p&gt;All of a sudden things started to become weird and slow, painfully slow. I don't know what went
wrong, but some fellow Mac users told me it was time for reformatting my laptop. That's what I'm
doing. After reasoning over the pros and cons, I'm finally getting Linux installed on my Macbook.&lt;/p&gt;
&lt;p&gt;So, here are my pros and cons list about Mac OS X:&lt;/p&gt;
&lt;h2&gt;Pros&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Have a working system since first logging in&lt;/li&gt;
&lt;li&gt;Full hardware compatibility&lt;/li&gt;
&lt;li&gt;Music software such as Logic, Ableton Live and VST instruments&lt;/li&gt;
&lt;li&gt;The Adobe suite (it turns out it can be useful for a programmer)&lt;/li&gt;
&lt;li&gt;Having some problems sorted out for you like backups, network config, etc.&lt;/li&gt;
&lt;li&gt;Working iPod syncronization&lt;/li&gt;
&lt;li&gt;No xrandr magic to be done when using an external display.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;No package management&lt;/li&gt;
&lt;li&gt;Not customizable&lt;/li&gt;
&lt;li&gt;No real choice apart &lt;em&gt;The Apple Way ©&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Can get painfully slow&lt;/li&gt;
&lt;li&gt;Harsh disk usage due to static linking&lt;/li&gt;
&lt;li&gt;Does not present a good service management interface&lt;/li&gt;
&lt;li&gt;Struggle to keep files up-to-date with my Linux stations  (not quite OS X related, but very relevant for me)&lt;/li&gt;
&lt;li&gt;A filesystem that can only be fully rw mounted from OS X&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It seems like a clear win for Linux.&lt;/p&gt;</summary><category term="linux"></category><category term="osx"></category><category term="macbook"></category></entry></feed>